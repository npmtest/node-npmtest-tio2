{"/home/travis/build/npmtest/node-npmtest-tio2/test.js":"/* istanbul instrument in package npmtest_tio2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tio2/lib.npmtest_tio2.js":"/* istanbul instrument in package npmtest_tio2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tio2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tio2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tio2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tio2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tio2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tio2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tio2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tio2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tio2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tio2.__dirname + '/lib.npmtest_tio2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tio2/node_modules/tio2/index.js":"var path = require('path');\n\nexports.init = function init(spoke, next) {\n\t/*spoke.registerJobHandler('titanium.sdk.test', function (job, callback) {\n\t\tnew (require('./lib/dispatcher'))({\n\t\t\trepo: 'https://github.com/appcelerator/titanium_mobile.git',\n\t\t\tbranch: job.payload && job.payload.branch || 'master'\n\t\t}).go(callback);\n\t});*/\n\n\tspoke.registerJobHandler('titanium.run.test', function (job, callback) {\n\t\t// job.payload = JSON.parse('{\"testDir\":\"/Users/chris/appc/tio2/test\",\"logLevel\":\"debug\",\"platform\":\"ios\",\"iosVersion\":\"7.1\"}');\n\t\tnew (require('./lib/runner'))(job.payload).go(callback);\n\t});\n\n\tnext(null, {});\n};","/home/travis/build/npmtest/node-npmtest-tio2/node_modules/tio2/lib/cli.js":"/**\n * tio2 will run tests written as normal mocha specs in a Titanium app.\n * these tests then are run on device or simulator and collected and sent back to the CLI.\n *\n * See LICENSE for information and copyright.\n */\nconst\n\tappc = require('node-appc'),\n\tcolors = require('colors'),\n\tlongjohn = require('longjohn'),\n\tprogram = require('commander');\n\nprogram\n\t.version(require('../package.json').version)\n\t.usage('[options] <test_dir> [<suite> <suite> ...]')\n\t.option('-q, --quiet', 'no build logging')\n\t.option('-s, --sdk [ver]', 'the Titanium SDK to use')\n\t.option('-p, --platform [name]', 'platform such as ios, android, etc')\n\t.option('-c, --count [count]', 'number of iterations to sample for each test case')\n\t.option('-g, --grep [expr]', 'run regular expression on each test to filter specific tests to execute')\n\t.option('-t, --target [target]', 'target either device or simulator (default)')\n\t.option('-i, --ios-version [ver]', 'the iOS version to build with')\n\t.option('-l, --log-level [level]', 'set the log-level for logging. defaults to info')\n\t.option('-j, --json', 'output as json')\n\t.parse(process.argv);\n\nif (program.args.length < 1) {\n\tprogram.help();\n\tprocess.exit();\n}\n\n// turn grep into a regular expression\nprogram.grep = program.grep && new RegExp(program.grep);\n\nvar runner = new (require('./runner'))({\n\t\ttestDir: program.args[0],\n\t\tsuites: program.args.slice(1),\n\t\tsdk: program.sdk,\n\t\titerations: program.count,\n\t\tlogLevel: program.logLevel,\n\t\tplatform: program.platform,\n\t\tquiet: program.quiet,\n\t\ttarget: program.target,\n\t\tiosVersion: program.iosVersion\n\t}),\n\tstartTime = Date.now();\n\nrunner.go(function (err, results) {\n\tif (err) {\n\t\t(err.message || err.toString()).split('\\n').forEach(function (line) { logger['tio2-error'](line); });\n\t} else {\n\t\tJSON.stringify(results, null, '\\t').split('\\n').forEach(function (line) {\n\t\t\tlogger['tio2-result'](line);\n\t\t});\n\t}\n\tlogger.tio2('Finished in %s', appc.time.prettyDiff(startTime, Date.now()).cyan);\n\tprocess.exit(~~!!err);\n});","/home/travis/build/npmtest/node-npmtest-tio2/node_modules/tio2/lib/runner.js":"const\n\tappc = require('node-appc'),\n\tasync = require('async'),\n\tfs = require('fs'),\n\tpath = require('path'),\n\tsprintf = require('sprintf'),\n\tSuite = require('./suite'),\n\tTable = require('cli-table'),\n\twinston = require('winston'),\n\tdefaultLevels = winston.config.cli.levels,\n\tlogger = new winston.Logger({\n\t\tpadLevels: true,\n\t\tlevels: appc.util.mix({\n\t\t\t'tio2':         defaultLevels.info,\n\t\t\t'tio2-result':  defaultLevels.info,\n\t\t\t'tio2-debug':   defaultLevels.debug,\n\t\t\t'tio2-info':    defaultLevels.info,\n\t\t\t'tio2-warn':    defaultLevels.warn,\n\t\t\t'tio2-error':   defaultLevels.error,\n\t\t\t'tio2-trace':   defaultLevels.debug\n\t\t}, defaultLevels),\n\t\tcolors: {\n\t\t\t'tio2':         'green',\n\t\t\t'tio2-result':  'grey',\n\t\t\t'tio2-debug':   'magenta',\n\t\t\t'tio2-info':    'green',\n\t\t\t'tio2-warn':    'yellow',\n\t\t\t'tio2-error':   'red',\n\t\t\t'tio2-trace':   'grey'\n\t\t},\n\t\ttransports: [\n\t\t\tnew winston.transports.Console({\n\t\t\t\tlevel: 'info',\n\t\t\t\tcolorize: true,\n\t\t\t\ttimestamp: true\n\t\t\t}),\n\t\t\tnew (require('./json-logger'))({\n\t\t\t\tlevel: 'debug',\n\t\t\t\tcolorize: false,\n\t\t\t\ttimestamp: true\n\t\t\t})\n\t\t]\n\t}),\n\tignoreDirs = /^(\\.svn|_svn|\\.git|\\.hg|\\.?[Cc][Vv][Ss]|\\.bzr|\\$RECYCLE\\.BIN)$/,\n\tignoreFiles = /^(\\.gitignore|\\.npmignore|\\.cvsignore|\\.DS_Store|\\._.*|[Tt]humbs.db|\\.vspscc|\\.vssscc|\\.sublime-project|\\.sublime-workspace|\\.project|\\.tmproj)$/;\n\nglobal.logger = logger;\n\nmodule.exports = Runner;\n\nfunction Runner(opts) {\n\topts || (opts = {});\n\n\t// init the logger\n\tif (opts.quiet) {\n\t\tlogger.transports.console.silent = true;\n\t}\n\tif (opts.logLevel) {\n\t\tlogger.transports.console.level = opts.logLevel;\n\t}\n\n\tthis.testDir = path.resolve(opts.testDir || '');\n\tthis.harnessDir = path.join(this.testDir, 'harness');\n\tthis.suitesDir = path.join(this.testDir, 'suites');\n\tthis.suiteFilter = (opts.suites || []).filter(function (s) { return !!s; }).map(function (s) { return s.trim().toLowerCase(); });\n\tthis.suites = [];\n\tthis.maxSuiteName = 0;\n\n\tthis.results = {\n\t\tsummary: { passed: 0, failed: 0 },\n\t\tsuites: {}\n\t};\n\n\tvar nodeModulesDir = path.resolve(__dirname, '..', 'node_modules');\n\tthis.timocha = path.resolve(nodeModulesDir, 'ti-mocha', 'ti-mocha.js');\n\tthis.should = path.resolve(nodeModulesDir, 'should', 'should.js');\n\n\tthis.sdkVersion = opts.sdk || '3.3.0.GA';\n\tthis.platform = (opts.platform || '').toLowerCase();\n\t/^(?:iphone|ipad)$/.test(this.platform) && (this.platform = 'ios');\n\tthis.iosVersion = opts.iosVersion || '7.1'\n\tthis.target = (opts.target || '').toLowerCase();\n\tthis.iterations = opts.iterations || 1;\n}\n\nRunner.prototype.go = function go(callback) {\n\tappc.async.series(this, [\n\t\t'detectEnvironment',\n\t\t'validateEnvironment',\n\t\t'validateParams',\n\t\t'validateTestDir',\n\t\t'loadSuites',\n\t\t'runSuites',\n\t], function (err) {\n\t\t// print summary\n\t\tlogger.tio2('Summary:');\n\t\tvar table = new Table({\n\t\t\tstyle: {\n\t\t\t\thead: ['cyan']\n\t\t\t},\n\t\t\thead: ['Suite', 'Passed', 'Failed']\n\t\t});\n\t\tthis.suites.forEach(function (s) {\n\t\t\ttable.push([s.name, String(s.passed).green, String(s.failed).red]);\n\t\t});\n\t\ttable.toString().split('\\n').forEach(function (line) {\n\t\t\tlogger.tio2(line);\n\t\t});\n\t\tlogger.tio2();\n\n\t\ttypeof callback === 'function' && callback(err, this.results);\n\t});\n};\n\nRunner.prototype.detectEnvironment = function detectEnvironment() {\n\tappc.util.mix(this.results, {\n\t\t'os': {\n\t\t\t'name': 'Mac OS X',\n\t\t\t'platform': 'osx',\n\t\t\t'version': '10.9.3',\n\t\t\t'architecture': '64bit',\n\t\t\t'numcpus': 8,\n\t\t\t'memory': 17179869184\n\t\t},\n\t\t'node': {\n\t\t\t'version': '0.10.29'\n\t\t},\n\t\t'titanium': {\n\t\t\t'3.4.0': {\n\t\t\t\t'version': '3.4.0',\n\t\t\t\t'path': '/Users/chris/Library/Application Support/Titanium/mobilesdk/osx/3.4.0',\n\t\t\t\t'platforms': [ 'android', 'iphone', 'mobileweb' ],\n\t\t\t\t'githash': 'ee98234',\n\t\t\t\t'timestamp': '06/13/14 16:07',\n\t\t\t\t'nodeAppcVer': '0.2.11'\n\t\t\t}\n\t\t},\n\t\t'jdk': {\n\t\t\t'version': '1.6.0',\n\t\t\t'build': 65,\n\t\t\t'architecture': '64bit',\n\t\t},\n\t\t'titaniumCLI': {\n\t\t\t'version': '3.3.0-dev',\n\t\t\t'nodeAppcVer': '0.2.6',\n\t\t\t'selectedSDK': '3.4.0'\n\t\t},\n\t\t'xcode': {\n\t\t\t'5.0.2:5A3005': {\n\t\t\t\t'path': '/Applications/Xcode-5.0.2.app/Contents/Developer',\n\t\t\t\t'selected': false,\n\t\t\t\t'version': '5.0.2',\n\t\t\t\t'build': '5A3005',\n\t\t\t\t'sdks': [ '7.0.3' ],\n\t\t\t\t'sims': [ '6.1', '7.0.3' ]\n\t\t\t},\n\t\t\t'5.1.1:5B1008': {\n\t\t\t\t'path': '/Applications/Xcode-5.1.1.app/Contents/Developer',\n\t\t\t\t'selected': true,\n\t\t\t\t'version': '5.1.1',\n\t\t\t\t'build': '5B1008',\n\t\t\t\t'sdks': [ '7.1' ],\n\t\t\t\t'sims': [ '6.1', '7.0.3', '7.1' ]\n\t\t\t}\n\t\t},\n\t\t'devices': [\n\t\t\t{\n\t\t\t\t'udid': 'd4fa1bddc406d1bda71b6adbd49c454b13f2e772',\n\t\t\t\t'name': 'Big Black',\n\t\t\t\t'buildVersion': '10B350',\n\t\t\t\t'cpuArchitecture': 'armv7s',\n\t\t\t\t'deviceClass': 'iPhone',\n\t\t\t\t'deviceColor': 'black',\n\t\t\t\t'hardwareModel': 'N41AP',\n\t\t\t\t'modelNumber': 'MD636',\n\t\t\t\t'productType': 'iPhone5,1',\n\t\t\t\t'productVersion': '6.1.4',\n\t\t\t\t'serialNumber': 'F2LJF8GSDTTQ',\n\t\t\t\t'id': 'd4fa1bddc406d1bda71b6adbd49c454b13f2e772'\n\t\t\t}\n\t\t]\n\t});\n};\n\nRunner.prototype.validateEnvironment = function validateEnvironment(next) {\n\t// we are going to inject these modules into generated source\n\tif (!fs.existsSync(this.timocha)) {\n\t\treturn next(new Error(sprintf(\"Couldn't find dependency 'ti-mocha': %s\", this.timocha.cyan) + '\\nDid you forget to run \"npm install\"?'));\n\t}\n\n\tif (!fs.existsSync(this.should)) {\n\t\treturn next(new Error(sprintf(\"Couldn't find dependency 'should': %s\", this.should.cyan) + '\\nDid you forget to run \"npm install\"?'));\n\t}\n\n\tnext();\n};\n\nRunner.prototype.validateParams = function validateParams(next) {\n\tif (!this.platform) {\n\t\treturn next(new Error(sprintf('Missing %s', '--platform <name>'.cyan)));\n\t}\n\tnext();\n};\n\nRunner.prototype.validateTestDir = function validateTestDir(next) {\n\t// make sure the project directory passed in is valid\n\tif (!fs.existsSync(this.testDir)) {\n\t\treturn next(new Error(sprintf(\"Couldn't find tests at %s\", this.testDir.cyan)));\n\t}\n\n\tif (!fs.existsSync(this.harnessDir)) {\n\t\treturn next(new Error(sprintf(\"Couldn't find harness at %s\", this.harnessDir.cyan)));\n\t}\n\n\t// make sure this is a Ti project\n\tvar harnessTiappPath = path.join(this.harnessDir, 'tiapp.xml.ejs');\n\tif (!fs.existsSync(harnessTiappPath)) {\n\t\tharnessTiappPath = path.join(this.harnessDir, 'tiapp.xml');\n\t\tif (!fs.existsSync(harnessTiappPath)) {\n\t\t\treturn next(new Error(sprintf(\"Invalid Titanium project; Couldn't find %s\", this.harnessTiappPath.cyan)));\n\t\t}\n\t}\n\n\t// make sure the suites folder exists\n\tif (!fs.existsSync(this.suitesDir)) {\n\t\treturn next(new Error(sprintf(\"Couldn't find suites folder at %s\", this.suitesDir.cyan)));\n\t}\n\n\tnext();\n};\n\nRunner.prototype.loadSuites = function loadSuites() {\n\tfs.readdirSync(this.suitesDir).forEach(function (name) {\n\t\tvar dir = path.join(this.suitesDir, name);\n\t\tif (fs.statSync(dir).isDirectory() && !ignoreDirs.test(name) && (this.suiteFilter.length === 0 || this.suiteFilter.indexOf(name.toLowerCase()) != -1)) {\n\t\t\tif (fs.existsSync(path.join(dir, 'app.js'))) {\n\t\t\t\tthis.maxSuiteName = Math.max(this.maxSuiteName, name.length);\n\t\t\t\tthis.suites.push(new Suite(name, dir, this));\n\t\t\t} else {\n\t\t\t\tlogger['tio2-warn'](sprintf('Suite \"%s\" does not have an app.js, skipping', name));\n\t\t\t}\n\t\t}\n\t}, this);\n\tlogger.tio2(this.suites.length === 1 ? 'Found ' + '1'.cyan + ' test suite:' : 'Found ' + String(this.suites.length).cyan + ' test suites:');\n\tthis.suites.forEach(function (s) {\n\t\tlogger.tio2('  ' + s.name.cyan);\n\t});\n\tlogger.tio2(); // add a little whitespace\n};\n\nRunner.prototype.runSuites = function runSuites(next) {\n\tvar self = this,\n\t\ti = 1,\n\t\tlen = this.suites.length;\n\n\tasync.eachSeries(this.suites, function runSuite(suite, cb) {\n\t\tlogger.tio2('Running suite %d of %d: %s', i++, len, suite.name.cyan);\n\n\t\tsuite.run(function (err, results) {\n\t\t\tself.results.summary.passed += suite.passed;\n\t\t\tself.results.summary.failed += suite.failed;\n\n\t\t\tif (err) {\n\t\t\t\tlogger['tio2-error'](sprintf('Suite %s finished with errors:', suite.name.cyan));\n\t\t\t\t(err.message || err.toString()).trim().split('\\n').forEach(function (line) {\n\t\t\t\t\tlogger['tio2-error'](line);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlogger.tio2('Suite %s finished successfully  %s  %s', suite.name.cyan, (suite.passed + ' passed').green, (suite.failed + ' failed').red);\n\t\t\t}\n\n\t\t\tself.results.suites[suite.name] = results;\n\t\t\tlogger.tio2(); // add a little whitespace\n\t\t\tcb();\n\t\t});\n\t}, next);\n};","/home/travis/build/npmtest/node-npmtest-tio2/node_modules/tio2/lib/suite.js":"const\n\tandroidlib = require('androidlib'),\n\tappc = require('node-appc'),\n\tejs = require('ejs'),\n\tfs = require('fs'),\n\tioslib = require('ioslib'),\n\tpath = require('path'),\n\tSourceMap = require(\"source-map\"),\n\tspawn = require('child_process').spawn,\n\tsprintf = require('sprintf'),\n\ttemp = require('temp'),\n\ttiappxml = require('tiapp.xml'),\n\tUglifyJS = require('uglify-js'),\n\twrench = require('wrench'),\n\tignoreDirs = /^(\\.svn|_svn|\\.git|\\.hg|\\.?[Cc][Vv][Ss]|\\.bzr|\\$RECYCLE\\.BIN)$/,\n\tignoreFiles = /^(\\.gitignore|\\.npmignore|\\.cvsignore|\\.DS_Store|\\._.*|[Tt]humbs.db|\\.vspscc|\\.vssscc|\\.sublime-project|\\.sublime-workspace|\\.project|\\.tmproj)$/;\n\nmodule.exports = Suite;\n\nfunction Suite(name, suiteDir, runner) {\n\tthis.name = name;\n\tthis.suiteDir = suiteDir;\n\n\tthis.harnessDir = runner.harnessDir;\n\tthis.timocha = runner.timocha;\n\tthis.should = runner.should;\n\tthis.sdkVersion = runner.sdkVersion;\n\tthis.platform = runner.platform;\n\tthis.target = runner.target;\n\tthis.iosVersion = runner.iosVersion;\n\tthis.iterations = runner.iterations;\n\n\tthis.buildDir = temp.path({ prefix: 'tio2_' });\n\tthis.buildResourcesDir = path.join(this.buildDir, 'Resources');\n\tthis.tiapp = null;\n\tthis.appDir = '',\n\tthis.appjs = '';\n\tthis.sourceMap = null;\n\tthis.injected = false;\n\tthis.results = {};\n\n\tthis.passed = 0;\n\tthis.failed = 0;\n}\n\nSuite.prototype.run = function run(callback) {\n\tappc.async.series(this, [\n\t\t'validateSuite',\n\t\t'copyHarnessApp',\n\t\t'copySuiteResources',\n\t\t'copyTestDependencies',\n\t\t'prepareTiapp',\n\t\t'prepareAppjs',\n\t\t'buildApp',\n\t\t'runApp',\n\t\t'processResults',\n\t\t'cleanup'\n\t], function (err) {\n\t\ttypeof callback === 'function' && callback(err, this.results);\n\t});\n};\n\nSuite.prototype.validateSuite = function validateSuite(next) {\n\tvar appjs = path.join(this.suiteDir, 'app.js');\n\tif (!fs.existsSync(appjs)) {\n\t\treturn next(new Error(sprintf(\"Suite %s is missing an app.js\", appjs.cyan)));\n\t}\n\n\tnext();\n};\n\nSuite.prototype.copyHarnessApp = function copyHarnessApp() {\n\tlogger.tio2('Build directory: %s', this.buildDir.cyan);\n\tlogger.tio2('Copying harness app files from %s...', this.harnessDir.cyan);\n\n\t// initialize the temp build directory\n\twrench.mkdirSyncRecursive(this.buildResourcesDir);\n\n\t// copy the harness (minus the app.js) into our build directory\n\tcopyDirSync(this.harnessDir, this.buildDir, null, this.harnessDir);\n\n\tthis.appjsTemplate = fs.readFileSync(path.join(this.harnessDir, 'Resources', 'app.js')).toString();\n};\n\nSuite.prototype.copySuiteResources = function copySuiteResources() {\n\tlogger.tio2('Copying suite resource files from %s...', this.suiteDir.cyan);\n\n\t// copy all files except the tiapp.xml and any .js files\n\tcopyDirSync(this.suiteDir, this.buildResourcesDir, /^(?!(tiapp\\.xml(?:\\.ejs)?)$).*/i, this.suiteDir);\n\n\t['tiapp.xml', 'tiapp.xml.ejs'].forEach(function (filename) {\n\t\tvar customTiapp = path.join(this.suiteDir, filename);\n\t\tif (fs.existsSync(customTiapp)) {\n\t\t\tcopyFileSync(customTiapp, path.join(this.buildDir, filename), this.harnessDir);\n\t\t}\n\t}, this);\n};\n\nSuite.prototype.copyTestDependencies = function copyTestDependencies() {\n\tvar nodeModulesDir = path.dirname(this.timocha);\n\tlogger.tio2('Copying test dependency files from %s...', nodeModulesDir.cyan);\n\tcopyFileSync(this.timocha, path.join(this.buildResourcesDir, path.basename(this.timocha)), nodeModulesDir);\n\tcopyFileSync(this.should, path.join(this.buildResourcesDir, path.basename(this.should)), nodeModulesDir);\n};\n\nSuite.prototype.prepareTiapp = function prepareTiapp(next) {\n\tlogger.tio2('Preparing tiapp.xml');\n\n\tvar tiappFile = path.join(this.buildDir, 'tiapp.xml'),\n\t\tejsTiapp = path.join(this.buildDir, 'tiapp.xml.ejs'),\n\t\tmoduleZip;\n\n\t// find the tiapp.xml\n\tif (fs.existsSync(ejsTiapp)) {\n\t\tfs.writeFileSync(tiappFile, ejs.render(fs.readFileSync(ejsTiapp).toString(), this));\n\t\tfs.unlinkSync(ejsTiapp);\n\t}\n\n\tthis.tiapp = tiappxml.load(tiappFile);\n\n\t// determine if we're building for iOS or Android, then inject the correct timer module\n\tif (this.platform === 'android') {\n\t\tmoduleZip = path.join(__dirname, '..', 'modules', 'android', 'com.appcelerator.timer-android-1.0.zip');\n\t\tthis.tiapp.setModule('com.appcelerator.timer', '1.0', 'android');\n\t} else if (this.platform === 'ios') {\n\t\tmoduleZip = path.join(__dirname, '..', 'modules', 'ios', 'com.appcelerator.timer-iphone-1.0.zip');\n\t\tthis.tiapp.setModule('com.appcelerator.timer', '1.0', 'iphone');\n\t}\n\n\tif (!moduleZip) return next();\n\n\t// save our tiapp.xml\n\tthis.tiapp.write();\n\n\t//perform the unzip of the module\n\tlogger.tio2('Unzipping: %s => %s', moduleZip.cyan, this.buildDir.cyan);\n\tappc.zip.unzip(moduleZip, this.buildDir, null, next);\n};\n/*\nfunction getType(node) {\n\tvar types = [\n\t\t\t'AST_Node',\n\t\t\t'AST_Token',\n\t\t\t'AST_Statement',\n\t\t\t'AST_Debugger',\n\t\t\t'AST_Directive',\n\t\t\t'AST_SimpleStatement',\n\t\t\t'AST_Block',\n\t\t\t'AST_BlockStatement',\n\t\t\t'AST_EmptyStatement',\n\t\t\t'AST_StatementWithBody',\n\t\t\t'AST_LabeledStatement',\n\t\t\t'AST_DWLoop',\n\t\t\t'AST_Do',\n\t\t\t'AST_While',\n\t\t\t'AST_For',\n\t\t\t'AST_ForIn',\n\t\t\t'AST_With',\n\t\t\t'AST_Scope',\n\t\t\t'AST_Toplevel',\n\t\t\t'AST_SymbolDeclaration',\n\t\t\t'AST_String',\n\t\t\t'AST_Assign',\n\t\t\t'AST_Sub',\n\t\t\t'AST_Lambda',\n\t\t\t'AST_Accessor',\n\t\t\t'AST_Function',\n\t\t\t'AST_Defun',\n\t\t\t'AST_Jump',\n\t\t\t'AST_Exit',\n\t\t\t'AST_Return',\n\t\t\t'AST_Throw',\n\t\t\t'AST_LoopControl',\n\t\t\t'AST_Break',\n\t\t\t'AST_Continue',\n\t\t\t'AST_If',\n\t\t\t'AST_Switch',\n\t\t\t'AST_SwitchBranch',\n\t\t\t'AST_Default',\n\t\t\t'AST_Case',\n\t\t\t'AST_Try',\n\t\t\t'AST_Catch',\n\t\t\t'AST_Finally',\n\t\t\t'AST_Definitions',\n\t\t\t'AST_Var',\n\t\t\t'AST_Const',\n\t\t\t'AST_VarDef',\n\t\t\t'AST_Call',\n\t\t\t'AST_New',\n\t\t\t'AST_Seq',\n\t\t\t'AST_PropAccess',\n\t\t\t'AST_Dot',\n\t\t\t'AST_Sub',\n\t\t\t'AST_Unary',\n\t\t\t'AST_UnaryPrefix',\n\t\t\t'AST_UnaryPostfix',\n\t\t\t'AST_Binary',\n\t\t\t'AST_Conditional',\n\t\t\t'AST_Assign',\n\t\t\t'AST_Array',\n\t\t\t'AST_Object',\n\t\t\t'AST_ObjectProperty',\n\t\t\t'AST_ObjectKeyVal',\n\t\t\t'AST_ObjectSetter',\n\t\t\t'AST_ObjectGetter',\n\t\t\t'AST_Symbol',\n\t\t\t'AST_SymbolAccessor',\n\t\t\t'AST_SymbolDeclaration',\n\t\t\t'AST_SymbolVar',\n\t\t\t'AST_SymbolConst',\n\t\t\t'AST_SymbolFunarg',\n\t\t\t'AST_SymbolDefun',\n\t\t\t'AST_SymbolLambda',\n\t\t\t'AST_SymbolCatch',\n\t\t\t'AST_Label',\n\t\t\t'AST_SymbolRef',\n\t\t\t'AST_LabelRef',\n\t\t\t'AST_This',\n\t\t\t'AST_Constant',\n\t\t\t'AST_Number',\n\t\t\t'AST_RegExp',\n\t\t\t'AST_Atom',\n\t\t\t'AST_Null',\n\t\t\t'AST_NaN',\n\t\t\t'AST_Undefined',\n\t\t\t'AST_Hole',\n\t\t\t'AST_Infinity',\n\t\t\t'AST_Boolean',\n\t\t\t'AST_False',\n\t\t\t'AST_True'\n\t\t],\n\t\tmatches = [];\n\n\ttypes.forEach(function (t) {\n\t\tif (node instanceof UglifyJS[t]) {\n\t\t\tmatches.push(t);\n\t\t}\n\t});\n\n\treturn matches;\n}\n\nvar util = require('util');\nfunction dump() {\n\tfor (var i = 0; i < arguments.length; i++) {\n\t\tconsole.error(util.inspect(arguments[i], false, null, true));\n\t}\n}\n*/\nSuite.prototype.prepareAppjs = function prepareAppjs() {\n\tvar dest = path.join(this.buildResourcesDir, 'app.js'),\n\t\tappjsContents = fs.readFileSync(dest).toString(),\n\t\tast = UglifyJS.parse(appjsContents, {\n\t\t\tfilename: 'app.js'\n\t\t});\n\n\t// determine the scope for variables so we can find variables and see if they are functions\n\tast.figure_out_scope({ screw_ie8: true });\n\n\tvar stack = [],\n\t\tfunctionsToWrap = [],\n\t\tshouldRefs = [];\n\n\t/**\n\t * The plan:\n\t * - walk the ast tree\n\t * - find all functions and scan the stack to see if we're inside an async it() call\n\t * - for each function definition in an async it()\n\t *   - scan the stack to see if the function is being passed into a should() call\n\t *     - if it's a should call, then do NOT wrap it since it's probably a throw() test\n\t *   - add the test to the functionsToWrap\n\t * - if the node is a should() call, determine if the value is a function\n\t *   - if should()'s value is a function, then add it to a list of shouldRefs to be excluded\n\t */\n\tvar appjsSuiteAST = ast.transform(new UglifyJS.TreeTransformer(function (node, descend) {\n\t\t\tif (node instanceof UglifyJS.AST_Function) {\n\t\t\t\t// found a function definition, check that it is an it() call with 2+ args and the 2nd one is a function that takes 1+ args (i.e. it's async)\n\t\t\t\tvar i, j, n;\n\t\t\t\tfor (i = stack.length - 1; i >= 0; i--) {\n\t\t\t\t\tn = stack[i];\n\t\t\t\t\tif (n instanceof UglifyJS.AST_Call && n.expression.name === 'it' && n.args.length >= 2 && n.args[1] instanceof UglifyJS.AST_Function && n.args[1].argnames.length > 0 && stack.length > i + 1) {\n\t\t\t\t\t\t// if this function is being directly passed into a should call, then we do NOT want to wrap it\n\t\t\t\t\t\t// because this is probably a should(function(){}).throw() type call\n\t\t\t\t\t\tvar inShould = false;\n\t\t\t\t\t\tfor (j = stack.length - 1; j > i; j--) {\n\t\t\t\t\t\t\tif (stack[j] instanceof UglifyJS.AST_Call && stack[j].expression.name === 'should') {\n\t\t\t\t\t\t\t\tinShould = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!inShould) {\n\t\t\t\t\t\t\tfunctionsToWrap.push({\n\t\t\t\t\t\t\t\tnode: node,\n\t\t\t\t\t\t\t\tcallback: n.args[1].argnames[0].name\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node instanceof UglifyJS.AST_Call && node.expression.name === 'should' && node.args.length > 0 && node.args[0] instanceof UglifyJS.AST_SymbolRef) {\n\t\t\t\t// found a should() call, so we want to check if the value is a function that we'll mark to be excluded from being wrapped\n\t\t\t\tvar ref = node.args[0].thedef.init;\n\t\t\t\twhile (ref && ref instanceof UglifyJS.AST_SymbolRef) {\n\t\t\t\t\tref = ref.thedef.init;\n\t\t\t\t}\n\t\t\t\tref && ref instanceof UglifyJS.AST_Function && shouldRefs.push(ref);\n\t\t\t}\n\n\t\t\t// add the node to a stack so we can determine if we're in an it() or should() call\n\t\t\tstack.push(node);\n\t\t\tdescend(node, this);\n\t\t\tstack.pop();\n\n\t\t\treturn node;\n\t\t}));\n\n\t// for each function we found, if it's not in the exclusion shouldRefs, then wrap the contents in a try/catch\n\tfunctionsToWrap.forEach(function (fn) {\n\t\tif (shouldRefs.indexOf(fn.node) === -1) {\n\t\t\tfn.node.body = [\n\t\t\t\tnew UglifyJS.AST_Try({\n\t\t\t\t\tbody: fn.node.body,\n\t\t\t\t\tbcatch: new UglifyJS.AST_Catch({\n\t\t\t\t\t\targname: new UglifyJS.AST_SymbolCatch({\n\t\t\t\t\t\t\tname: '$ex'\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tbody: [\n\t\t\t\t\t\t\tnew UglifyJS.AST_SimpleStatement({\n\t\t\t\t\t\t\t\tbody: new UglifyJS.AST_Call({\n\t\t\t\t\t\t\t\t\targs: [\n\t\t\t\t\t\t\t\t\t\tnew UglifyJS.AST_SymbolRef({\n\t\t\t\t\t\t\t\t\t\t\tname: '$ex'\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\texpression: new UglifyJS.AST_SymbolRef({\n\t\t\t\t\t\t\t\t\t\tname: fn.callback\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t];\n\t\t}\n\t});\n\n\t// second, inject the suite ast into the template ast\n\tvar injected = false,\n\t\tappjsAST = UglifyJS.parse(this.appjsTemplate, {\n\t\t\t\tfilename: 'harness_app.js'\n\t\t\t}).transform(new UglifyJS.TreeTransformer(function (node, descend) {\n\t\t\t\tif (injected) return node;\n\n\t\t\t\tif (node instanceof UglifyJS.AST_SimpleStatement && node.body.value === 'tests go here') {\n\t\t\t\t\t// we found our insertion node!\n\t\t\t\t\tinjected = true;\n\t\t\t\t\treturn appjsSuiteAST;\n\t\t\t\t}\n\n\t\t\t\tdescend(node, this);\n\t\t\t\treturn node;\n\t\t\t}));\n\n\tthis.injected = injected;\n\n\tvar sourceMap = this.sourceMap = UglifyJS.SourceMap({\n\t\t\tfile: 'app.js',\n\t\t\torig: null,\n\t\t\troot: null\n\t\t}),\n\t\tstream = UglifyJS.OutputStream({\n\t\t\tbeautify: true,\n\t\t\tscrew_ie8: true,\n\t\t\tsource_map: sourceMap\n\t\t});\n\n\tsourceMap.get().setSourceContent('harness_app.js', this.appjsTemplate);\n\tsourceMap.get().setSourceContent('app.js', appjsContents);\n\n\tappjsAST.print(stream);\n\n\tfs.existsSync(dest) && fs.unlinkSync(dest);\n\n\t// render the custom app.js template\n\tlogger.tio2('Writing new app.js: %s', dest.cyan);\n\tthis.appjs = stream.toString();\n\tfs.writeFileSync(dest, this.appjs);\n};\n\nSuite.prototype.buildApp = function buildApp(next) {\n\tvar args = [\n\t\t'--no-colors',\n\t\t'--no-progress-bars',\n\t\t'--no-banner',\n\t\t'--no-prompt',\n\t\t'--log-level', 'trace'\n\t];\n\n\tthis.tiapp.sdkVersion && args.push('--sdk', this.tiapp.sdkVersion);\n\n\targs.push(\n\t\t'build',\n\t\t'--project-dir',\n\t\tthis.buildDir,\n\t\t'--build-only',\n\t\t'--platform',\n\t\tthis.platform\n\t);\n\n\tthis.target && args.push('--target', this.target);\n\n\tappc.async.series(this, [\n\t\tfunction (cb) {\n\t\t\t// add iOS args\n\t\t\tif (this.platform !== 'ios') return cb();\n\n\t\t\tthis.iosVersion && args.push('--ios-version', this.iosVersion);\n\n\t\t\tif (this.target !== 'device') {\n\t\t\t\treturn cb();\n\t\t\t}\n\n\t\t\t// find us a device\n\t\t\tioslib.device.detect(function (err, deviceResults) {\n\t\t\t\tif (!deviceResults.devices.length) {\n\t\t\t\t\t// no devices connected\n\t\t\t\t\treturn done(new Error('No iOS devices connected'));\n\t\t\t\t}\n\n\t\t\t\tioslib.certs.detect(function (err, certResults) {\n\t\t\t\t\tvar certs = [];\n\t\t\t\t\tObject.keys(certResults.certs.keychains).forEach(function (keychain) {\n\t\t\t\t\t\tvar types = certResults.certs.keychains[keychain];\n\t\t\t\t\t\tObject.keys(types).forEach(function (type) {\n\t\t\t\t\t\t\tcerts = certs.concat(types[type]);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!certs.length) {\n\t\t\t\t\t\treturn cb(new Error('No iOS certificates'));\n\t\t\t\t\t}\n\n\t\t\t\t\t// find us a provisioning profile\n\t\t\t\t\tioslib.provisioning.find({\n\t\t\t\t\t\tappId: this.tiapp.id,\n\t\t\t\t\t\tcerts: certs,\n\t\t\t\t\t\tdevicesUDIDs: deviceResults.devices.map(function (device) { return device.udid; })\n\t\t\t\t\t}, function (err, profiles) {\n\t\t\t\t\t\tif (err || !profiles.length) {\n\t\t\t\t\t\t\treturn cb(new Error('No provisioning profiles found'));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar profile = profiles.shift(),\n\t\t\t\t\t\t\tdeviceUDID = deviceResults.devices.filter(function (device) { return profile.devices.indexOf(device.udid) !== -1; }).shift().udid,\n\t\t\t\t\t\t\tcertName = certs.filter(function (cert) {\n\t\t\t\t\t\t\t\tvar prefix = cert.pem.replace(/^-----BEGIN CERTIFICATE-----\\n/, '').substring(0, 60);\n\t\t\t\t\t\t\t\treturn profile.certs.some(function (pc) {\n\t\t\t\t\t\t\t\t\treturn pc.indexOf(prefix) === 0;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}).shift().name;\n\n\t\t\t\t\t\targs.push(\n\t\t\t\t\t\t\t'--developer-name', certName.replace('iPhone Developer: ', ''),\n\t\t\t\t\t\t\t'--pp-uuid', profile.udid,\n\t\t\t\t\t\t\t'--device-id', deviceUDID\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tcb(err);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t], function (err) {\n\t\tif (err) return next(err);\n\n\t\tlogger.tio2('Executing: %s', ('titanium \"' + args.join('\" \"') + '\"').cyan);\n\n\t\tvar child = spawn('titanium', args);\n\n\t\tchild.stdout.on('data', function (data) {\n\t\t\tlogger['tio2-trace'](data.toString().trim());\n\t\t});\n\n\t\tchild.stderr.on('data', function (data) {\n\t\t\tlogger['tio2-trace'](data.toString().trim());\n\t\t});\n\n\t\tchild.on('close', function (code) {\n\t\t\tthis.appDir = path.join(this.buildDir, 'build', 'iphone', 'build', 'Debug-' + (this.target === 'device' ? 'iphoneos' : 'iphonesimulator'), this.tiapp.name + '.app');\n\t\t\tnext(code);\n\t\t}.bind(this));\n\t});\n};\n\nSuite.prototype.runApp = function runApp(next) {\n\tlogger.tio2('Running app');\n\n\tvar self = this,\n\t\ttarget = this.target,\n\t\tinTiMochaResult = false,\n\t\ttiMochaResults = [],\n\t\tlogLevelRegExp = /^\\[\\w+\\]\\s*/;\n\n\tif (this.platform === 'ios') {\n\t\ttarget || (target = 'simulator');\n\n\t\tif (!ioslib[target]) {\n\t\t\treturn next(new Error(sprintf('Unsupported iOS target \"%s\"', target)));\n\t\t}\n\n\t\tlogger.tio2('Launching iOS app on %s', target.cyan);\n\t\tlogger['tio2-debug']('Build directory: %s', path.join(this.buildDir, 'build', 'iphone', 'build', 'Debug-' + (target === 'device' ? 'iphoneos' : 'iphonesimulator'), this.tiapp.name + '.app').cyan);\n\n\t\tif (target === 'simulator') {\n\t\t\tvar simHandle,\n\t\t\t\temitter;\n\n\t\t\tfunction watch(line) {\n\t\t\t\tline = line.replace(logLevelRegExp, '');\n\t\t\t\tif (line === '!TI_MOCHA_RESULTS_START!') {\n\t\t\t\t\tinTiMochaResult = true;\n\t\t\t\t} else if (inTiMochaResult && line === '!TI_MOCHA_RESULTS_STOP!') {\n\t\t\t\t\temitter.removeListener('log', watch);\n\t\t\t\t\temitter.removeListener('logFile', watch);\n\t\t\t\t\tioslib.simulator.stop(simHandle, function () {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tself.results = tiMochaResults.length ? JSON.parse(tiMochaResults.join('\\n').trim()) : {};\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\tnext(new Error('Results are not valid JSON'));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else if (inTiMochaResult && line) {\n\t\t\t\t\ttiMochaResults.push(line);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\temitter = ioslib.simulator.launch(null, {\n\t\t\t\t\tappPath: this.appDir,\n\t\t\t\t\thide: true,\n\t\t\t\t\tlogFilename: this.tiapp.guid + '.log',\n\t\t\t\t\tsimVersion: '7.1'\n\t\t\t\t})\n\t\t\t\t.on('launched', function (sh) {\n\t\t\t\t\tsimHandle = sh;\n\t\t\t\t})\n\t\t\t\t.on('log', watch)\n\t\t\t\t.on('log-debug', function (msg) {\n\t\t\t\t\tlogger['tio2-debug']('[ioslib] '.magenta + msg.replace(/(?:(\\[[^\\]]+\\]) )*/, function (m) { return m.magenta; }));\n\t\t\t\t})\n\t\t\t\t.on('log-file', watch);\n\n\t\t} else if (target === 'device') {\n\t\t\t// TODO: device\n\t\t}\n\t\treturn;\n\t}\n\n/*\n\tif (this.platform === 'android') {\n\t\tvar name = this.tiapp.name.charAt(0).toUpperCase() + this.tiapp.name.substring(1);\n\t\ttarget || (target = 'emulator');\n\n\t\tlogger.tio2('Launching Android app on %s', target.cyan);\n\t\tandroidlib[program.target].launch({\n\t\t\tapk: path.join(buildDir, 'build', 'android', 'bin', name + '.apk'),\n\t\t\tname: name,\n\t\t\tappid: this.tiapp.id,\n\t\t\ttarget: target,\n\t\t\tunit: true,\n\t\t\thide: true,\n\t\t\tlogger: outputWatcher.bind(this),\n\t\t\tcallback: finalize\n\t\t});\n\t\treturn;\n\t}\n*/\n\n\t// unsupported platform\n\tnext(new Error(sprintf('Unsupported platform \"%s\"', this.platform)));\n};\n\nSuite.prototype.processResults = function processResults() {\n\tlogger.tio2('Processing results');\n\n\tvar results = this.results.results;\n\n\tif (!Array.isArray(results)) {\n\t\treturn;\n\t}\n\n\tvar sourceMappings = new SourceMap.SourceMapConsumer(this.sourceMap.toString()),\n\t\tsources = {\n\t\t\t'app.js': this.appjs.split('\\n')\n\t\t};\n\n\tresults.forEach(function (r) {\n\t\tif (r.state === 'passed') {\n\t\t\tthis.passed++;\n\t\t} else if (r.state === 'failed') {\n\t\t\tthis.failed++;\n\n\t\t\t// fix up the exceptions if we injected the tests\n\t\t\tif (this.injected && r.error && r.error.backtrace) {\n\t\t\t\tvar bt = r.error.backtrace.split('\\n'),\n\t\t\t\t\tbacktrace = [],\n\t\t\t\t\ti = 0,\n\t\t\t\t\tl = bt.length,\n\t\t\t\t\tinfo,\n\t\t\t\t\tdata,\n\t\t\t\t\tfile,\n\t\t\t\t\tpos;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tinfo = bt[i].split(/\\s/).pop().match(/^(.*\\/(.*))\\:(\\d+)(?:,(\\d+))?$/);\n\t\t\t\t\tif (info && (backtrace.length || info[2] !== 'should.js')) {\n\t\t\t\t\t\tdata = {\n\t\t\t\t\t\t\toriginal: bt[i],\n\t\t\t\t\t\t\tfile: (this.appDir ? info[1].replace(this.appDir, '') : info[1]).replace(/^\\//, ''),\n\t\t\t\t\t\t\tline: ~~info[3],\n\t\t\t\t\t\t\tcolumn: info[4] ? ~~info[4] : null,\n\t\t\t\t\t\t\tsource: null\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (!sources[data.file]) {\n\t\t\t\t\t\t\tfile = path.join(this.buildResourcesDir, data.file);\n\t\t\t\t\t\t\tif (fs.existsSync(file)) {\n\t\t\t\t\t\t\t\tsources[data.file] = fs.readFileSync(file).toString();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (sources[data.file]) {\n\t\t\t\t\t\t\tpos = data.column ? sourceMappings.originalPositionFor({ line: data, column: data.column }) : null;\n\t\t\t\t\t\t\tif (!pos || !pos.line) {\n\t\t\t\t\t\t\t\t// no column or bad column, try again\n\t\t\t\t\t\t\t\tif (line && (data.column = sources[data.file][data.line].match(/\\w/).index)) {\n\t\t\t\t\t\t\t\t\tpos = sourceMappings.originalPositionFor(data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (pos && pos.line) {\n\t\t\t\t\t\t\t\tdata.source = sources[data.file][pos.line];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbacktrace.push(data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tr.error.backtrace = backtrace;\n\t\t\t}\n\t\t}\n\t}, this);\n};\n\nSuite.prototype.cleanup = function cleanup() {\n\tlogger.tio2('Cleaning up');\n\twrench.rmdirSyncRecursive(this.buildDir);\n};\n\nfunction copyFileSync(from, to, rel) {\n\tlogger['tio2-debug']('Copying %s => %s', (rel ? from.replace(rel, '').replace(/^\\/|\\\\/, '') : from).cyan, to.cyan);\n\n\tvar src = fs.openSync(from, 'r'),\n\t\tdest = fs.openSync(to, 'w'),\n\t\tbuffer = new Buffer(8096),\n\t\tbytesRead,\n\t\tposition = 0;\n\n\twhile (bytesRead = fs.readSync(src, buffer, 0, 8096, position)) {\n\t\tfs.writeSync(dest, buffer, 0, bytesRead);\n\t\tposition += bytesRead;\n\t}\n\n\tfs.closeSync(src);\n\tfs.closeSync(dest);\n}\n\nfunction copyDirSync(src, dest, filter, rel) {\n\tfs.existsSync(dest) || wrench.mkdirSyncRecursive(dest);\n\tfs.existsSync(src) && fs.readdirSync(src).forEach(function (name) {\n\t\tvar from = path.join(src, name),\n\t\t\tto = path.join(dest, name);\n\t\tif (fs.existsSync(from) && (!filter || filter.test(name))) {\n\t\t\tif (fs.statSync(from).isDirectory()) {\n\t\t\t\t// we only want to apply the filter to the root of the directory being copied... I think\n\t\t\t\t!ignoreDirs.test(name) && copyDirSync(from, to, null, rel);\n\t\t\t\t// !ignoreDirs.test(name) && copyDirSync(from, to, filter, rel);\n\t\t\t} else if (!ignoreFiles.test(name)) {\n\t\t\t\tcopyFileSync(from, to, rel);\n\t\t\t}\n\t\t}\n\t});\n}","/home/travis/build/npmtest/node-npmtest-tio2/node_modules/tio2/lib/json-logger.js":"const\n\tpath = require('path'),\n\tcommon = require(path.join(path.dirname(require.resolve('winston')), 'winston', 'common.js')),\n\tevents = require('events'),\n\tTransport = require('winston').Transport,\n\tutil = require('util');\n\nmodule.exports = JSONLogger;\n\nfunction JSONLogger(options) {\n\tTransport.call(this, options);\n\toptions = options || {};\n\n\tthis.output = [];\n\n\tthis.json        = true;\n\tthis.colorize    = options.colorize    || false;\n\tthis.prettyPrint = options.prettyPrint || false;\n\tthis.timestamp   = typeof options.timestamp !== 'undefined' ? options.timestamp : false;\n\tthis.label       = options.label       || null;\n\n\tthis.stringify = options.stringify || function (obj) {\n\t\treturn JSON.stringify(obj);\n\t};\n};\n\nutil.inherits(JSONLogger, Transport);\n\nJSONLogger.prototype.name = 'json-logger';\n\nJSONLogger.prototype.log = function log(level, msg, meta, callback) {\n\tif (this.silent) {\n\t\treturn callback(null, true);\n\t}\n\n\tthis.output.push(common.log({\n\t\tcolorize:    this.colorize,\n\t\tjson:        this.json,\n\t\tlevel:       level,\n\t\tmessage:     msg,\n\t\tmeta:        meta,\n\t\tstringify:   this.stringify,\n\t\ttimestamp:   this.timestamp,\n\t\tprettyPrint: this.prettyPrint,\n\t\traw:         this.raw,\n\t\tlabel:       this.label\n\t}));\n\n\tthis.emit('logged');\n\tcallback(null, true);\n};\n\nJSONLogger.prototype.clearLogs = function () {\n\tthis.output = [];\n};"}